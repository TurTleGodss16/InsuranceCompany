package carinsurance;

//New class week 2 - User

import java.util.*;
import java.io.Serializable;
import java.io.*;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.stream.*;

public class User implements Cloneable, Comparable<User>, Serializable, Comparator<User> {
    //Declare attributes of User class
    private String name;
    private int userID;
    private Address address;
    private String userName;
    private String userPassword;
    private ArrayList<InsurancePolicies> policies;
    //Automatically generated ID
    private static int userID_autoGenerated = 0;
    private HashMap<Integer, InsurancePolicies> policies_list;
    
    //Constructor with user ID input from keyboard
    public User(String name, int userID, Address address, String userName, String userPassword){
        this.name = name;
        this.userID = userID;
        this.address = address;
        this.policies = new ArrayList<InsurancePolicies>();
        this.policies_list = new HashMap<Integer, InsurancePolicies>();
        this.userName = userName;
        this.userPassword = userPassword;
        //Automatically generated user ID
        //this.userID = User.count();
    }
    
    //Create Copy Constructor - WEEK 6 / LAB 4
    public User(User user){
        this.name = user.name;
        this.userID = user.userID;
        this.address = new Address(user.address);
        this.policies = new ArrayList<InsurancePolicies>();
        for(InsurancePolicies policy:user.policies)
        {
            policies.add(policy);
        }
        this.userName = userName;
        this.userPassword = user.userPassword;
        this.policies_list = new HashMap<Integer, InsurancePolicies>();
        for(InsurancePolicies policy:user.policies_list.values())
        {
            this.policies_list.put(policy.id, policy);
        }
        //Automatically generated user ID
        //this.user = User.count();
    }
    
    //Constructor with Automatically generated ID
    public User(String name, Address address,String userName, String userPassword){
        this.name = name;
        this.address = address;
        this.policies = new ArrayList<InsurancePolicies>();
        this.userID = User.count();
        this.userName = userName;
        this.userPassword = userPassword;
        this.policies_list = new HashMap<Integer, InsurancePolicies>();
    }
    
    //Default Constructor - User for Comparator
    public User(){
        
    }
    
    //Get user ID
    public int getUserID(){
        return userID;
    }
    
    //Get user name
    public String getUserName(){
        return name;
    }
    
    //Get user name login
    public String getUserNameLogin(){
        return userName;
    }
    
    //Get password
    public String getUserPassword(){
        return userPassword;
    }
    
    //Get list of policies
    public HashMap<Integer, InsurancePolicies> getPolicies(){
        return policies_list;
    }
    
    //Get list of policies as an array list
    public ArrayList<InsurancePolicies> getPolicies1(){
        ArrayList<InsurancePolicies> list = new ArrayList<>();
        for(InsurancePolicies policy:policies_list.values())
        {
            list.add(policy);
        }
        return list;
    }
    
    //Find policy with ArrayList<>
    /*public InsurancePolicies findPolicy(int policyID){
        for(InsurancePolicies policy : policies)
        {
            if(policy.getID() == policyID)
            {
                return policy;
            }
        }
        return null;
    }*/
    
    //Find Policy with HashMap
    public InsurancePolicies findPolicy(int policyID){
        for(int policy_id:policies_list.keySet())
        {
            if(policy_id == policyID)
            {
                return policies_list.get(policy_id);
            }
        }
        return null;
    }
    
    //Add policy by ArrayList
    /*public boolean addPolicy1(InsurancePolicies policy){
        for(InsurancePolicies pol:policies)
        {
            if(policy.getID() == pol.getID())
            {
                return false;
            }
        }
        policies.add(policy);
        return true;
    }*/
    
    //Add policy by HashMap
    public boolean addPolicy(String userName, String password, InsurancePolicies policy){
        if(validateUser(userName, password))
        {
            for(int policy_id:policies_list.keySet())
            {
                if(policy_id == policy.getID())
                {
                    return false;
                }
            }
            policies_list.put(policy.getID(), policy);
            return true;
        }
        else
            return false;
    }
    
    //Print all information of this user <including all the policies information> - ArrayList
    /*public void print(){
        System.out.println("Name: " + name + ", User ID: " + userID + ", Address: " + address.getAddress());
        InsurancePolicies.printPolicies(policies);
    }*/
    
    //Print all information of this user <including all the policies information> - HashMap
    public void print(){
        System.out.println("Name: " + name + ", User ID: " + userID + ", Address: " + address.getAddress() + ", password: " + userPassword);
        InsurancePolicies.printPolicies(policies_list);
    }
    
    //toString method - ArrayList
    /*public String toString(){
        String listPolicies = "";
        //return "Name: " + name + ", User ID: " + userID + ", Address: " + address.getAddress() + "\n" + policies;
        for(InsurancePolicies policy:policies)
        {
            listPolicies += (policy.toString());
        }
        return "Name: " + name + ", User ID: " + userID + ", Address: " + address.getAddress() + "\n" + listPolicies;
    }*/
    
    //toString method - HashMap
    public String toString(){
        String listPolicies = "";
        //return "Name: " + name + ", User ID: " + userID + ", Address: " + address.getAddress() + "\n" + policies;
        for(InsurancePolicies policy:policies_list.values())
        {
            listPolicies += (policy.toString());
        }
        return "Name: " + name + ", User ID: " + userID + ", Address: " + address.getAddress() + " " + userPassword + "\n" + listPolicies;
    }
    
    //Print all the policies information and the premium payment of this policy - ArrayList
    /*public void printPolicies(int flatRate){
        System.out.println("All the policies: ");
        for(InsurancePolicies policy : policies)
        {
            policy.print();
            System.out.println(" The premium is: " + policy.calcPayment(flatRate));
        }
    }*/
    
    //Print all the policies information and the premium payment of this policy - HashMap
    /*public void printPolicies(int flatRate){
        System.out.println("All the policies: ");
        for(InsurancePolicies policy : policies_list.values())
        {
            policy.print();
            System.out.println(" The premium is: " + policy.calcPayment(flatRate));
        }
    }*/
    
    //Print all the policies information and the premium payment of this policy - Stream / Lambda - LAB8
    public void printPolicies(int flatRate){
        System.out.println("All the policies: ");
        policies_list.values().forEach(x ->{ x.print();
                                             System.out.println("The premium is: " + x.calcPayment(flatRate));});
    }
    
    //Calculate total premium payment for user by calling corresponding static method inside InsurancePolicies - ArrayList
    /*public double calcTotalPremiums1(int flatRate){
        return InsurancePolicies.calcTotalPayment(policies, flatRate);
    }*/
    
    //Calculate Total Payment - HashMap
    public double calcTotalPremiums1(String userName, String password, int flatRate){
       if(validateUser(userName, password))
       {
           return InsurancePolicies.calcTotalPayment(policies_list, flatRate);
       }
       else
           return -1.0;
    }
    
    //Car price of user rise All - ArrayList
    /*public void carPriceRiseAll1(double risePercent){
        InsurancePolicies.carPriceRiseAll(policies, risePercent);
    }*/
    
    //Car Price All - HashMap
    public void carPriceRiseAll1(double risePercent){
       InsurancePolicies.carPriceRiseAll(policies_list, risePercent);
    }
    
    //Filter by Car Model - ArrayList
    public ArrayList<InsurancePolicies> filterByCarModel1(String carModel){
        return InsurancePolicies.filterByCarModel(getPolicies1(), carModel);
    }
    
    //Filter by Car Model - HashMap
    public HashMap<Integer, InsurancePolicies> filterByCarModel(String carModel){
        return InsurancePolicies.filterByCarModel(policies_list, carModel);
    }
    
    //WEEK 3 CODE ADDED
    //Create a third party policy and add it to list
    public boolean createThirdPartyPolicy(String userName, String password, String policyHolderName, int id, Car car, int numberOfClaims, MyDate expiryDate, String comments) throws PolicyException, PolicyHolderNameException{
        ThirdPartyPolicy newThirdPartyPolicy = new ThirdPartyPolicy(policyHolderName, id, car, numberOfClaims, expiryDate, comments);
        //policies.add(newThirdPartyPolicy);
        /*if(findPolicy(id) != null)
        {
            return false;
        }
        else
        {
            addPolicy(newThirdPartyPolicy);
            return true;
        }*/
        if(userName.equals(this.userName) && password.equals(this.userPassword))
        {
            return addPolicy(userName, password, newThirdPartyPolicy);
        }
        else
            return false;
    }
    
    //Create a comprehensive policy and add ti to list
    public boolean createComprehensivePolicy(String userName, String password, String policyHolderName, int id, Car car, int numberOfClaims, MyDate expiryDate, int driverAge, int level) throws PolicyException, PolicyHolderNameException{
        ComprehensivePolicy newComprehensivePolicy = new ComprehensivePolicy(policyHolderName, id, car, numberOfClaims, expiryDate, driverAge, level);
        //policies.add(newComprehensivePolicy);
        /*if(findPolicy(id) != null)
        {
            return false;
        }
        else
        {
            addPolicy(newComprehensivePolicy);
            return true;
        }*/
        if(userName.equals(this.userName) && password.equals(this.userPassword))
        {
            return addPolicy(userName, password, newComprehensivePolicy);
        }
        else
            return false;
    }
    
    //Filter policies in list by expiry date of them - ArrayList
    /*public ArrayList<InsurancePolicies> filterByExpiryDate(MyDate date){
        return InsurancePolicies.filterByExpiryDate(policies, date);
    }*/
    
    //Filter by Expiry Date - HashMap
    public HashMap<Integer, InsurancePolicies> filterByExpiryDate(MyDate date){
        return InsurancePolicies.filterByExpiryDate(policies_list, date);
    }
    
    //Get user information
    public String getUserInfo(){
         return "Name: " + name + ", User ID: " + userID + ", Address: " + address.getAddress() + " " + userPassword + "\n";
    }
    
    //Get all policies of this user - ArrayList
    /*public ArrayList<InsurancePolicies> allPolicies(){
        return policies;
    }*/
    
    //Get all policies of this user - ArrayList
    public HashMap<Integer, InsurancePolicies> allPolicies(){
        return policies_list;
    }
    
    //Get address of this user
    public Address getAddress(){
        //Address addressGet = new Address(address.getStreetNum(), address.getStreet(), address.getSuburb(), address.getCity());
        //return addressGet;
        return address;
    }
    
    //Get Expiry Date of policies
    
    //WEEK 4 CODE ADDED - ASSIGNMENT 1
    //Goes through all the policies for a user and populates a list of distinct car model names - ArrayList
    /*public ArrayList<String> populateDistinctCarModels(){
        ArrayList<String> listCarModel = new ArrayList<String>();
        for(InsurancePolicies policy:policies)
        {
            if(!listCarModel.contains(policy.getCar().getModel()))
            {
                listCarModel.add(policy.getCar().getModel());
            }
        }
        return listCarModel;
    }*/
    
    //Goes through all the policies for a user and populates a list of distinct car model names - ArrayList
    public ArrayList<String> populateDistinctCarModels(){
        ArrayList<String> listCarModel = new ArrayList<String>();
        for(InsurancePolicies policy:policies_list.values())
        {
            if(!listCarModel.contains(policy.getCar().getModel()))
            {
                listCarModel.add(policy.getCar().getModel());
            }
        }
        return listCarModel;
    }
    
    //Returns the number of policies this user owns for the given carModel - ArrayList
    /*public int getTotalCountForCarModel(String carModel){
        int count = 0;
        for(InsurancePolicies policy:policies)
        {
            if(policy.getCar().getModel().equals(carModel))
            {
                count++;
            }
        }
        return count;
    }*/
    
    //Returns the number of policies this user owns for the given carModel - HashMap
    public int getTotalCountForCarModel(String carModel){
        int count = 0;
        for(InsurancePolicies policy:policies_list.values())
        {
            if(policy.getCar().getModel().equals(carModel))
            {
                count++;
            }
        }
        return count;
    }
    
    //Returns the total payments for the given carModel across all the policies this user owns - ArrayList
    /*public double getTotalPaymentForCarModel(String carModel, int flatRate){
        double totalPayment = 0.0;
        for(InsurancePolicies policy:policies)
        {
            if(policy.getCar().getModel().equals(carModel))
            {
                totalPayment += policy.calcPayment(flatRate);
            }
        }
        return totalPayment;
    }*/
    
    //Returns the total payments for the given carModel across all the policies this user owns - HashMap
    public double getTotalPaymentForCarModel(String carModel, int flatRate){
        double totalPayment = 0.0;
        for(InsurancePolicies policy:policies_list.values())
        {
            if(policy.getCar().getModel().equals(carModel))
            {
                totalPayment += policy.calcPayment(flatRate);
            }
        }
        return totalPayment;
    }
    
    //Returns the total payments for the given carModel accross all the policies this user owns - HashMap - Stream / Lambda
    public double getTotalPaymentForCarModelNew(String carModel, int flatRate){
        return policies_list.values()
                            .stream()
                            .filter(x -> x.getCar().getModel().equals(carModel))
                            .map(x -> x.calcPayment(flatRate))
                            .reduce(0.0, (x, y) -> x+y);
    }
    
    //Returns the count for each model in the carModels as a list of integers
    public ArrayList<Integer> getTotalCountPerCarModel(ArrayList<String> carModels){
        ArrayList<Integer> totalCountList = new ArrayList<Integer>();
        for(String carModel:carModels)
        {
            int count = getTotalCountForCarModel(carModel);
            totalCountList.add(count);
        }
        return totalCountList;
    }
    
    //Returns the count for each model in the carModels as a list of integers - Stream / Lambda
    
    //Returns the Total Payment for each model in the carModels as a list of doubles
    public ArrayList<Double> getTotalPaymentPerCarModel(ArrayList<String> carModels, int flatRate){
        ArrayList<Double> totalCountList = new ArrayList<Double>();
        for(String carModel:carModels)
        {
            double totalPayment = getTotalPaymentForCarModel(carModel, flatRate);
            totalCountList.add(totalPayment);
        }
        return totalCountList;
    }
    
    //Generates the report
    public void reportPaymentsPerCarModel(ArrayList<String> carModels, ArrayList<Integer> counts, ArrayList<Double> premiumPayments){
        System.out.printf("%-15s \t \t %25s \t \t %25s \n", "Car Model", "Total Premium Payment", "Average Premium Payment");
        for(int i = 0; i < carModels.size(); i++)
        {
            //System.out.println(carModels.get(i) + " \t \t \t \t " + premiumPayments.get(i) + " \t \t \t \t " + premiumPayments.get(i) / (double) counts.get(i));
            System.out.printf("%-15s \t \t \t \t %.2f \t \t \t \t %.2f\n", carModels.get(i), premiumPayments.get(i), premiumPayments.get(i) / (double)counts.get(i));
        }
    }
    
    //User remove a policy from user - ArrayList
    /*public boolean removePolicy(int policyID){
        boolean checkExist = false;
        for(InsurancePolicies policy:policies)
        {
            if(policy.getID() == policyID)
            {
                checkExist = true;
            }
        }
        if(checkExist)
        {
            policies.remove(findPolicy(policyID));
            return true;
        }
        else
            return false;
    }*/
    
    //User remove a policy from user - HashMap
    public boolean removePolicy(int policyID){
        ArrayList<InsurancePolicies> policies = new ArrayList<InsurancePolicies>();
        policies = InsurancePolicies.shallowCopy(policies_list);
        boolean checkExist = false;
        for(InsurancePolicies policy:policies)
        {
            if(policy.getID() == policyID)
            {
                checkExist = true;
            }
        }
        if(checkExist)
        {
            policies.remove(findPolicy(policyID));
            return true;
        }
        else
            return false;
    }
    
    //Automatically generated
    public static int count(){
        userID_autoGenerated += 1;
        return userID_autoGenerated;
    }
    
    //WEEK 6 - LAB 4
    //Cloneable Interface - ArrayList
    /*@Override
    public User clone() throws CloneNotSupportedException{
        User output = (User)super.clone();
        output.address = address.clone();
        output.policies = new ArrayList<>();
        for(InsurancePolicies policy:policies)
        {
            output.policies.add(policy.clone());
        }
        return output;
        //return (User)super.clone();
    }*/
    
    //Cloneable Interface - HashMap
    @Override
    public User clone() throws CloneNotSupportedException{
        User output = (User)super.clone();
        output.address = address.clone();
        output.policies_list = new HashMap<>();
        for(InsurancePolicies policy:policies_list.values())
        {
            output.policies_list.put(policy.getID(), policy);
        }
        return output;
    }
    
    //Shallow copy ArrayList of Users - ArrayList / ArrayList
    /*public static ArrayList<User> shallowCopy(ArrayList<User> users){
        ArrayList<User> shallowCopyList = new ArrayList<User>();
        for(User user:users)
        {
            shallowCopyList.add(user);
        }
        return shallowCopyList;
    }*/
    
    //Shallow copy ArrayList of Users - ArrayList / ArrayList - Stream / Lambda - LAB8
    public static ArrayList<User> shallowCopy(ArrayList<User> users){
       return (ArrayList<User>)(users.stream()
               .collect(Collectors.toList())); 
    }
    
    //Shallow Copy - ArrayList / HashMap
    public static ArrayList<User> shallowCopy(HashMap<Integer, User> users){
        ArrayList<User> shallowCopyList = new ArrayList<User>();
        for(User user:users.values())
        {
            shallowCopyList.add(user);
        }
        return shallowCopyList;
    }
    
    //Shallow Copy - HashMap / HashMap
    public static HashMap<Integer, User> shallowCopyHashMap(HashMap<Integer, User> users){
        HashMap<Integer, User> shallowCopyList = new HashMap<Integer, User>();
        for(User user:users.values())
        {
            shallowCopyList.put(user.getUserID(), user);
        }
        return shallowCopyList;
    }
    
    //Deep copy ArrayList of Users using clone() - ArrayList / ArrayList
    /*public static ArrayList<User> deepCopy(ArrayList<User> users) throws CloneNotSupportedException{
        ArrayList<User> deepCopyList = new ArrayList<User>();
        for(User user:users)
        {
            deepCopyList.add(user.clone());
        }
        return deepCopyList;
    }*/
    
    //Deep copy ArrayList of Users using clone() - ArrayList / ArrayList - Stream / Lambda - LAB8
    public static ArrayList<User> deepCopy(ArrayList<User> users) throws CloneNotSupportedException{
       return (ArrayList<User>)(users.stream()
               .map(x -> {
                    try{
                       return x.clone();
                    }
                    catch(CloneNotSupportedException e)
                    {
                        throw new RuntimeException(e);
                    }
                })
               .collect(Collectors.toList())); 
    }
    
    //Deep Copy using clone() - ArrayList / HashMap
    public static ArrayList<User> deepCopy(HashMap<Integer, User> users) throws CloneNotSupportedException{
        ArrayList<User> deepCopyList = new ArrayList<User>();
        for(User user:users.values())
        {
            deepCopyList.add(user.clone());
        }
        return deepCopyList;
    }
    
    //Deep Copy using clone() - HashMap / HashMap
    public static HashMap<Integer, User> deepCopyHashMap(HashMap<Integer, User> users) throws CloneNotSupportedException{
        HashMap<Integer, User> deepCopyList = new HashMap<Integer, User>();
        for(User user:users.values())
        {
            deepCopyList.put(user.getUserID(), user.clone());
        }
        return deepCopyList;
    }
    
    //Deep copy ArrayList of User's policies - ArrayList / Return ArrayList
    /*public ArrayList<InsurancePolicies> deepCopyPolicies() throws CloneNotSupportedException{
        ArrayList<InsurancePolicies> deepCopyList = new ArrayList<InsurancePolicies>();
        for(InsurancePolicies policy:policies)
        {
            deepCopyList.add(policy.clone());
        }
        return deepCopyList;
    }*/
    
    //Deep Copy User's Policies - HashMap / Return ArrayList
    public ArrayList<InsurancePolicies> deepCopyPolicies() throws CloneNotSupportedException{
        ArrayList<InsurancePolicies> deepCopyList = new ArrayList<InsurancePolicies>();
        for(InsurancePolicies policy:policies_list.values())
        {
            deepCopyList.add(policy.clone());
        }
        return deepCopyList;
    }
    
    //Deep Copy User's Policies - HashMap / Return HashMap
    public HashMap<Integer, InsurancePolicies> deepCopyPoliciesHashMap() throws CloneNotSupportedException{
        HashMap<Integer, InsurancePolicies> deepCopyList = new HashMap<Integer, InsurancePolicies>();
        for(InsurancePolicies policy:policies_list.values())
        {
            deepCopyList.put(policy.getID(), policy.clone());
        }
        return deepCopyList;
    }
    
    //Shallow copy ArrayList of User's policies - ArrayList / Return ArrayList
    /*public ArrayList<InsurancePolicies> shallowCopyPolicies(){
        ArrayList<InsurancePolicies> shallowCopyList = new ArrayList<InsurancePolicies>();
        for(InsurancePolicies policy:policies)
        {
            shallowCopyList.add(policy);
        }
        return shallowCopyList;
    }*/
    
    //Shallow Copy User's Policies - HashMap / Return ArrayList
    public ArrayList<InsurancePolicies> shallowCopyPolicies(){
        ArrayList<InsurancePolicies> shallowCopyList = new ArrayList<InsurancePolicies>();
        for(InsurancePolicies policy:policies_list.values())
        {
            shallowCopyList.add(policy);
        }
        return shallowCopyList;
    }
    
    //Shallow Copy User's Policies - HashMap / Return HashMap
    public HashMap<Integer, InsurancePolicies> shallowCopyPoliciesHashMap(){
       HashMap<Integer, InsurancePolicies> shallowCopyList = new HashMap<Integer, InsurancePolicies>();
       for(InsurancePolicies policy:policies_list.values())
       {
           shallowCopyList.put(policy.getID(), policy);
       }
        return shallowCopyList; 
    }
    
    //Comparable Interface
    @Override
    public int compareTo(User otherUser){
        return userName.compareTo(otherUser.userName);
    }
    
    //CompareTo1(), based on total policy premium payments for user's policies, constant flatRate = 5
    /*@Override
    public int compareTo(User otherUser){
        if(calcTotalPremiums1(5) > otherUser.calcTotalPremiums1(5))
        {
            return 1;
        }
        else if(calcTotalPremiums1(5) < otherUser.calcTotalPremiums1(5))
        {
            return -1;
        }
        else
        {
            return 0;
        }
    }*/
    
    //Comparator class, compare 2 User with their total premium, replace for compareTo1 - ASSIGNMENT 2
    @Override
    public int compare(User user1, User user2){
        //return user1.calcTotalPremiums1(user1.getUserName(), user1.getUserPassword(), 5) - user2.calcTotalPremiums1(user2.getUserName(), user2.getUserPassword(), 5);
        if(user1.calcTotalPremiums1(user1.getUserNameLogin(), user1.getUserPassword(), 5) > user2.calcTotalPremiums1(user2.getUserNameLogin(), user2.getUserPassword(), 5))
        {
            return 1;
        }
        else if(user1.calcTotalPremiums1(user1.getUserNameLogin(), user1.getUserPassword(), 5) < user2.calcTotalPremiums1(user2.getUserNameLogin(), user2.getUserPassword(), 5))
        {
            return -1;
        }
        return 0;
    }
    
    //Sort policies by date using Comparable - ArrayList
    /*public ArrayList<InsurancePolicies> sortPoliciesByDate(){
        ArrayList<InsurancePolicies> sortList = new ArrayList<InsurancePolicies>();
        for(InsurancePolicies policy:policies)
        {
            sortList.add(policy);
        }
        Collections.sort(sortList);
        return sortList;
    }*/
    
    //Sort Policies by Date using Comaparable - HashMap
    public ArrayList<InsurancePolicies> sortPoliciesByDate(){
       ArrayList<InsurancePolicies> sortList = new ArrayList<InsurancePolicies>();
       sortList = InsurancePolicies.shallowCopy(policies_list); //Make shallow copy of Policy
       Collections.sort(sortList);
       return sortList;
    }
    
    //Aggregates the number of policies the user owns for any given car model
    public HashMap<String, Integer> getTotalCountPerCarModel(){
        HashMap<String, Integer> totalCountCarModel = new HashMap<String, Integer>();
        ArrayList<String> listCarModel = new ArrayList<String>();
        for(InsurancePolicies policy:policies_list.values())
        {
            String carModel = policy.car.getModel();
            if(!listCarModel.contains(carModel))
            {
                listCarModel.add(carModel);
            }
        }
        for(String carModel:listCarModel)
        {
            int countPerCarModel = getTotalCountForCarModel(carModel);
            totalCountCarModel.put(carModel, countPerCarModel);
        }
        return totalCountCarModel;
    }
    
    //Aggregates the number of policies the user owns for any given car model - Stream / Lambda - A3
    public HashMap<String, Integer> getTotalCountPerCarModelNew(){
        ArrayList<String> listCarModel = new ArrayList<String>();
        //Get distinct car model
        listCarModel = (ArrayList<String>)(policies_list.values()
                                    .stream()
                                    .map((x -> x.car.getModel()))
                                    .distinct()
                                    .collect(Collectors.toList()));
        HashMap<String, Integer> totalCountCarModel = new HashMap<String, Integer>();
        listCarModel.forEach((x) -> {totalCountCarModel.put(x, getTotalCountForCarModel(x));});
        return totalCountCarModel;
    }
    
    //Aggregates the total premium payments of policies the user owns for any given car model
    public HashMap<String, Double> getTotalPremiumPerCarModel(int flatRate){
        HashMap<String, Double> totalPremiumCarModel = new HashMap<String, Double>();
        ArrayList<String> listCarModel = new ArrayList<String>();
        for(InsurancePolicies policy:policies_list.values())
        {
            String carModel = policy.car.getModel();
            if(!listCarModel.contains(carModel))
            {
                listCarModel.add(carModel);
            }
        }
        for(String carModel:listCarModel)
        {
            double paymentPerCarModel = getTotalPaymentForCarModel(carModel, flatRate);
            totalPremiumCarModel.put(carModel, paymentPerCarModel);
        }
        return totalPremiumCarModel;
    }
    
    //Aggregates the total premium payments of policies the user owns for any given car model - Stream / Lambda - A3
    public HashMap<String, Double> getTotalPremiumPerCarModelNew(int flatRate){
        ArrayList<String> listCarModel = new ArrayList<String>();
        HashMap<String, Double> totalPremiumCarModel = new HashMap<String, Double>();
        //Get distinct car model
        listCarModel = (ArrayList<String>)(policies_list.values()
                                    .stream()
                                    .map((x -> x.car.getModel()))
                                    .distinct()
                                    .collect(Collectors.toList()));
        listCarModel.forEach((x) -> {totalPremiumCarModel.put(x, getTotalPaymentForCarModel(x, flatRate));});
        return totalPremiumCarModel;
    }
    
    //Report Car Model - HashMap
    public void reportByCarModel(HashMap<String, Integer> countCarModel, HashMap<String, Double> paymentCarModel){
        //System.out.println("Car Model \t \t Total Premium Payment \t \t Average Premium Payment");
        System.out.printf("%-15s \t \t %25s \t \t %25s \n", "Car Model", "Total Premium Payment", "Average Premium Payment");
        for(String carModel:countCarModel.keySet())
        {
             System.out.printf("%-15s \t \t \t \t %.2f \t \t \t \t %.2f\n", carModel, paymentCarModel.get(carModel), (double)paymentCarModel.get(carModel) / countCarModel.get(carModel));
        }
    }
    
    //Binary Files - LAB 6
    //Load File
    public static HashMap<Integer, User> load(String fileName) throws IOException{
        HashMap<Integer, User> loadHashMap = new HashMap<Integer, User>();
        ObjectInputStream inputst = null;
        loadHashMap.clear();
        
        try
        {
            inputst = new ObjectInputStream(Files.newInputStream(Paths.get(fileName)));
        }
        catch(IOException ex)
        {
            System.err.println("Error in create/open the file");
            System.exit(1);
        }
        
        try
        {
            while(true)
            {
                User user = (User) inputst.readObject();
                loadHashMap.put(user.getUserID(), user);
            }
        }
        catch(EOFException ex)
        {
            System.out.println("No more record!");
        }
        catch(ClassNotFoundException ex)
        {
            System.err.println("Error in wrong class in the file");
        }
        catch(IOException ex)
        {
            System.err.println("Error in add object to the file");
            System.exit(1);
        }
        
        try
        {
            if(inputst != null)
            inputst.close();
        }
        catch(IOException ex)
        {
            System.err.println("Error in close the file");
            System.exit(1);
        }
        return loadHashMap;
    }
    
    //Save HashMap to File
    public static boolean save(HashMap<Integer, User> listUser, String fileName){
        ObjectOutputStream outputst = null;
        
        try
        {
            outputst = new ObjectOutputStream(Files.newOutputStream(Paths.get(fileName)));
        }
        catch(IOException ex)
        {
            System.err.println("Error in create / open the file");
            System.exit(1);
            return false;
        }
        
        try
        {
            for(User user:listUser.values())
            {
                outputst.writeObject(user);
            }
        }
        catch(IOException ex)
        {
            System.err.println("Error in adding the objects to the file");
            System.exit(1);
            return false;
        }
        
        try
        {
            if(outputst != null)
            outputst.close();
        }
        catch(IOException ex)
        {
            System.err.println("Error in closing the file");
            System.exit(1);
            return false;
        }
        
        return true;
    }
    
    //Get number of policy
    public int getPoliciesCount(){
        return policies_list.size();
    }
    
    //Delimited String
    public String toDelimitedString(){
        String userInfo = "";
        userInfo += name + "," + userID + "," + address.toDelimitedString() + "," + userName + "," + userPassword + "," + getPoliciesCount();
        //userInfo += name + "," + userID + "," + address.toDelimitedString();
        for(InsurancePolicies policy:policies_list.values())
        {
            userInfo += "," + policy.toDelimitedString() + ",";
        }
        return userInfo;
    }
    
    //Delimited String without number of polices
    public String toDelimitedString2(){
        String userInfo = "";
        userInfo += name + "," + userID + "," + address.toDelimitedString() + "," + userName + "," + userPassword;
        //userInfo += name + "," + userID + "," + address.toDelimitedString();
        for(InsurancePolicies policy:policies_list.values())
        {
            userInfo += "," + policy.toDelimitedString() + ",";
        }
        return userInfo;
    }
    
    //Add Policy to HashMap
    public void addPolicies(InsurancePolicies policy){
        policies_list.put(policy.getID(), policy);
    }
    
    //Read HashMap of User from a text file
    public static HashMap<Integer, User> loadTextFile(String fileName) throws IOException, PolicyException, PolicyHolderNameException{
        HashMap<Integer, User> loadHashMap = new HashMap<Integer, User>();
        BufferedReader inp = new BufferedReader(new FileReader(fileName));
        String line = inp.readLine();
        while(line != null)
        {
            line = line.trim();
            String[] field = line.split(",");
            String name = field[0];
            int userID = Integer.parseInt(field[1]);
            int streetNum = Integer.parseInt(field[2]);
            String street = field[3];
            String suburb = field[4];
            String city = field[5];
            String userName = field[6];
            String userPassword = field[7];
            int numOfPolicies = Integer.parseInt(field[8]);
            
            Address userAddress = new Address(streetNum, street, suburb, city);
            
            User user = new User(name, userID, userAddress, userName, userPassword);
            
            for(int i = 0; i < numOfPolicies; i++)
            {
                switch(field[9 + i*12])
                {
                    case "CP":
                        String policyHolderName = field[10 + i*12];
                        int id = Integer.parseInt(field[11 + i*12]);
                        String model = field[12 + i*12];
                        CarType type = CarType.valueOf(field[13 + i*12]);
                        int manufacturingYear = Integer.parseInt(field[14 + i*12]);
                        double price = Double.parseDouble(field[15 + i*12]);
                        int numberOfClaims = Integer.parseInt(field[16 + i*12]);
                        int year = Integer.parseInt(field[17 + i*12]);
                        int month = Integer.parseInt(field[18 + i*12]);
                        int day = Integer.parseInt(field[19 + i*12]);
                        String[] driverAge_level = field[20 + i*12].split(";");
                        int driverAge = Integer.parseInt(driverAge_level[0]);
                        int level = Integer.parseInt(driverAge_level[1]);
                        //int driverAge = Integer.parseInt(field[18 + i*13]);
                        //int level = Integer.parseInt(field[19 + i*13]);

                        Car carCP = new Car(model, type, manufacturingYear, price);
                        MyDate expiryDateCP = new MyDate(year, month, day);

                        ComprehensivePolicy cp = new ComprehensivePolicy(policyHolderName, id, carCP, numberOfClaims, expiryDateCP, driverAge, level);
                        //user.addPolicies(cp);
                        user.addPolicy(name, userPassword, cp);
                        break;
                    case "TPP":
                        policyHolderName = field[10 + i*12];
                        id = Integer.parseInt(field[11 + i*12]);
                        model = field[12 + i*12];
                        type = CarType.valueOf(field[13+i*12]);
                        manufacturingYear = Integer.parseInt(field[14 + i*12]);
                        price = Double.parseDouble(field[15 + i*12]);
                        numberOfClaims = Integer.parseInt(field[16 + i*12]);
                        year = Integer.parseInt(field[17 + i*12]);
                        month = Integer.parseInt(field[18 + i*12]);
                        day = Integer.parseInt(field[19 + i*12]);
                        String comment = field[20 + i*12];
                        
                        Car carTPP = new Car(model, type, manufacturingYear, price);
                        MyDate expiryDateTPP = new MyDate(year, month, day);
                        
                        ThirdPartyPolicy tpp = new ThirdPartyPolicy(policyHolderName, id, carTPP, numberOfClaims, expiryDateTPP, comment);
                        //user.addPolicies(tpp);
                        user.addPolicy(name, userPassword, tpp);
                        
                        break;
                }
            }
            loadHashMap.put(user.getUserID(), user);
            line = inp.readLine();
        }
        inp.close();
        return loadHashMap;
    }
    
    //Write HashMap of User to a text file 
    public static boolean saveTextFile(HashMap<Integer, User> listUser, String fileName) throws IOException{
        BufferedWriter out = new BufferedWriter(new FileWriter(fileName));
        for(User user:listUser.values())
        {
            out.write(user.toDelimitedString() + "\n");
        }
        out.close();
        return true;
    }
    
    //Print User with static method
    public static void printUsers(HashMap<Integer, User> userList){
        for(User user:userList.values())
        {
            user.print();
        }
    }
    
    //Validate user login
    public boolean validateUser(String userName, String password){
        if(userName.equals(this.userName) && password.equals(userPassword))
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    
    //Gets a range array as input, return the number of policies of user per range
    public int[] policyCount(String userName, String password, int[] ranges){
        int[] count = new int[ranges.length];
        if(validateUser(userName, password))
        {
            for(InsurancePolicies policy:policies_list.values())
            {
                if(policy.calcPayment(5) > 0 && policy.calcPayment(5) <= ranges[0])
                {
                    count[0]++;
                }
            }
            for(int i = 1; i < ranges.length; i++)
            {
                for(InsurancePolicies policy:policies_list.values())
                {
                    if(policy.calcPayment(5) <= ranges[i] && policy.calcPayment(5) > ranges[i-1])
                    {
                        count[i]++;
                    }
                }
            }
            return count;
        }
        else
            return count;
    }
    
    //Gets a range array as input, returns number of policies owned by this user per range per car model
    public HashMap<String, Integer []> policyCarModelCount(String username, String password, int[] ranges){
        HashMap<String, Integer []> count = new HashMap<String, Integer []>();
        if(validateUser(username, password))
        {
            ArrayList<String> carModelList = new ArrayList<String>();
            for(InsurancePolicies pol:policies_list.values())
            {
                String carModel = pol.getCar().getModel();
                if(!carModelList.contains(carModel))
                {
                    carModelList.add(carModel);
                }
            }
            for(String carModel:carModelList)
            {
                int[] count_pol = new int[ranges.length];
                for(InsurancePolicies pol:policies_list.values())
                    {
                        String model = pol.getCar().getModel();
                        if(carModel.equals(model) && pol.calcPayment(5) <= ranges[0])
                        {
                            count_pol[0] += 1;
                        }
                    }
                for(int i = 1; i < ranges.length; i++)
                {
                    for(InsurancePolicies pol:policies_list.values())
                    {
                        String model = pol.getCar().getModel();
                        if(carModel.equals(model) && pol.calcPayment(5) > ranges[i-1] && pol.calcPayment(5) <= ranges[i])
                        {
                            count_pol[i] += 1;
                        }
                    }
                }
                Integer[] count_final = new Integer[ranges.length];
                for(int i = 0; i < ranges.length; i++)
                {
                    count_final[i] = Integer.valueOf(count_pol[i]);
                }
                count.put(carModel, count_final);
            }
            //Adjust int[] to Integer[]
            return count;
        }
        else
        {
            return count;
        }
    }
    
    public void setName(String name){
        this.name = name;
    }
    
    public void setPassword(String password){
        this.userPassword = password;
    }
}
